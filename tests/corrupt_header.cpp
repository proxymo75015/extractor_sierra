#include <catch2/catch_test_macros.hpp>
#include <filesystem>
#include <fstream>
#include <vector>

#include "robot_extractor.hpp"

namespace fs = std::filesystem;

TEST_CASE("Invalid resolution after endian swap throws") {
    fs::path tmpDir = fs::temp_directory_path();
    fs::path input = tmpDir / "corrupt_header.rbt";
    std::vector<unsigned char> data = {
        0x16,0x00, 0x00,0x00, 'S','O','L','\0',
        0x05,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00,
        0x00,0x00, 0x00,0x00, 0x00,0x00,
        0x10,0x27, 0x88,0x13, 0x00,0x00, 0x00,0x00,
        0x3c,0x00, 0x00,0x00, 0x00,0x00, 0x01,0x00,
        0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00
    };
    std::ofstream out(input, std::ios::binary);
    out.write(reinterpret_cast<const char*>(data.data()), static_cast<std::streamsize>(data.size()));
    out.close();

    fs::path outDir = tmpDir / "corrupt_out";
    fs::create_directories(outDir);

    robot::RobotExtractor extractor(input, outDir, false);
    REQUIRE_THROWS_AS(extractor.extract(), std::runtime_error);
}
